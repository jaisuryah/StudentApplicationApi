package com.ThreeEntitycontroller;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.ThreeEntityInterface.AppointmentRepository;
import com.ThreeEntityInterface.DoctorRepository;
import com.ThreeEntityInterface.PatientRepository;
import com.ThreeEntitycontrollerModel.Appointment;
import com.ThreeEntitycontrollerModel.Doctor;
import com.ThreeEntitycontrollerModel.Patient;

import java.util.List;

@RestController
@RequestMapping("/api")
public class Controller {

    @Autowired
    private PatientRepository patientRepository;

    // Patient Endpoints
    
    @PostMapping("/Addpatients")
    public Patient createPatient(@RequestBody Patient patient) {
        return patientRepository.save(patient);
    }

    @GetMapping("/patients")
    public List<Patient> getAllPatients() {
        return patientRepository.findAll();
    }

    @GetMapping("/patients/{id}")
    public Patient getPatientById(@PathVariable Long id) {
        return patientRepository.findById(id).orElse(null);
    }

    @PutMapping("/patients/{id}")
    public Patient updatePatient(@PathVariable Long id, @RequestBody Patient newPatientData) {
        return patientRepository.findById(id)
                .map(existingPatient -> {
                    existingPatient.setName(newPatientData.getName());
                    existingPatient.setDateOfBirth(newPatientData.getDateOfBirth());
                    existingPatient.setContactNumber(newPatientData.getContactNumber());
                    existingPatient.setIssue(newPatientData.getIssue());
                    return patientRepository.save(existingPatient);
                })
                .orElse(null);
    }

    @DeleteMapping("/patients/{id}")
    public void deletePatient(@PathVariable Long id) {
        patientRepository.deleteById(id);
    }

    // Doctor Endpoints
    
    @PostMapping("/doctors")
    public Doctor createDoctor(@RequestBody Doctor doctor) {
        return doctorRepository.save(doctor);
    }

    @GetMapping("/doctors")
    public List<Doctor> getAllDoctors() {
        return doctorRepository.findAll();
    }

    @GetMapping("/doctors/{id}")
    public Doctor getDoctorById(@PathVariable Long id) {
        return doctorRepository.findById(id).orElse(null);
    }

    @PutMapping("/doctors/{id}")
    public Doctor updateDoctor(@PathVariable Long id, @RequestBody Doctor newDoctorData) {
        return doctorRepository.findById(id)
                .map(existingDoctor -> {
                    existingDoctor.setName(newDoctorData.getName());
                    existingDoctor.setSpecialty(newDoctorData.getSpecialty());
                    return doctorRepository.save(existingDoctor);
                })
                .orElse(null);
    }

    @DeleteMapping("/doctors/{id}")
    public void deleteDoctor(@PathVariable Long id) {
        doctorRepository.deleteById(id);
    }

    // Appointment Endpoints
    
    @PostMapping("/appointments")
    public Appointment scheduleAppointment(@RequestBody Appointment appointment) {
        return appointmentRepository.save(appointment);
    }

    @GetMapping("/appointments")
    public List<Appointment> getAllAppointments() {
        return appointmentRepository.findAll();
    }

    @GetMapping("/appointments/{id}")
    public Appointment getAppointmentById(@PathVariable Long id) {
        return appointmentRepository.findById(id).orElse(null);
    }

    @PutMapping("/appointments/{id}/reschedule")
    public Appointment rescheduleAppointment(@PathVariable Long id, @RequestParam String newDate, @RequestParam String newTime) {
        return appointmentRepository.findById(id)
                .map(existingAppointment -> {
                    existingAppointment.setDate(newDate);
                    existingAppointment.setTime(newTime);
                    return appointmentRepository.save(existingAppointment);
                })
                .orElse(null);
    }

    @DeleteMapping("/appointments/{id}")
    public void cancelAppointment(@PathVariable Long id) {
        appointmentRepository.deleteById(id);
    }
}
